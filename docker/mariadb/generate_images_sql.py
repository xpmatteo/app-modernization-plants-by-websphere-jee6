#!/usr/bin/env python3
# ABOUTME: One-time utility to generate SQL for loading product images into INVENTORY.IMGBYTES
# ABOUTME: Reads images from Spring Boot static resources and outputs UPDATE statements

import os
import sys
from pathlib import Path

def read_image_as_hex(image_path):
    """Read image file and return MySQL HEX format: X'...'"""
    with open(image_path, 'rb') as f:
        binary_data = f.read()
    hex_string = binary_data.hex().upper()
    return f"X'{hex_string}'"

def main():
    # Paths relative to this script's location
    script_dir = Path(__file__).parent
    project_root = script_dir.parent.parent
    images_dir = project_root / "spring-boot-pbw" / "src" / "main" / "resources" / "static" / "images"
    output_file = script_dir / "images.sql"

    if not images_dir.exists():
        print(f"ERROR: Images directory not found: {images_dir}", file=sys.stderr)
        sys.exit(1)

    # Get all image files (product images that match INVENTORY.IMAGE column)
    image_files = []
    for ext in ['*.jpg', '*.gif', '*.bmp', '*.JPG', '*.GIF', '*.BMP']:
        image_files.extend(images_dir.glob(ext))

    if not image_files:
        print(f"ERROR: No image files found in {images_dir}", file=sys.stderr)
        sys.exit(1)

    print(f"Found {len(image_files)} image files in {images_dir}")

    # Generate SQL statements
    statements = []
    statements.append("-- Auto-generated SQL for loading product images into INVENTORY.IMGBYTES")
    statements.append("-- Generated by: docker/mariadb/generate_images_sql.py")
    statements.append("-- DO NOT EDIT THIS FILE MANUALLY - regenerate using the Python script")
    statements.append("")

    total_size = 0
    processed_count = 0

    for image_file in sorted(image_files):
        filename = image_file.name
        file_size = image_file.stat().st_size

        # Convert to MySQL HEX format
        hex_data = read_image_as_hex(image_file)

        # Generate UPDATE statement matching by IMAGE column
        sql = f"UPDATE INVENTORY SET IMGBYTES = {hex_data} WHERE IMAGE = '{filename}';"
        statements.append(sql)

        total_size += file_size
        processed_count += 1
        print(f"  Processed: {filename} ({file_size:,} bytes)")

    # Write to output file
    with open(output_file, 'w') as f:
        f.write('\n'.join(statements))
        f.write('\n')

    print(f"\n✓ Successfully generated {output_file}")
    print(f"✓ Processed {processed_count} images")
    print(f"✓ Total size: {total_size:,} bytes ({total_size / 1024 / 1024:.2f} MB)")
    print(f"✓ Output file size: {output_file.stat().st_size:,} bytes ({output_file.stat().st_size / 1024 / 1024:.2f} MB)")
    print(f"\nNext steps:")
    print(f"  1. Review the generated file: {output_file}")
    print(f"  2. Update init.sql to source this file")
    print(f"  3. Run: make reset-db && make restart")
    print(f"  4. Test images at http://localhost:8080")

if __name__ == '__main__':
    main()
